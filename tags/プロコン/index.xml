
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>プロコン on でぶろぐ</title>
   <link>https://taisa-asiato.github.io/tags/%E3%83%97%E3%83%AD%E3%82%B3%E3%83%B3/</link>
   <description>Recent content in プロコン on でぶろぐ</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>ja</language>
   <lastBuildDate>Wed, 04 Dec 2019 00:00:00 +0000</lastBuildDate>
   
       <atom:link href="https://taisa-asiato.github.io/tags/%E3%83%97%E3%83%AD%E3%82%B3%E3%83%B3/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Rust Memo2</title>
       <link>https://taisa-asiato.github.io/post/rust-memo2/</link>
       <pubDate>Sun, 12 Jan 2020 21:48:17 +0900</pubDate>
       
       <guid>https://taisa-asiato.github.io/post/rust-memo2/</guid>
       <description>&lt;p&gt;Rustの勉強メモその2です。&lt;/p&gt;
&lt;p&gt;螺旋本の3.5問目(安定ソート), トランプカードを
構造体を使用して表現していたのですが,
標準入力から得た値をパースしてCard型のVectorにpushする処理が
コンパイル時にエラーになりました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;error&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;E0382&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: assign to part of moved value: &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;card_val&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
  --&amp;gt; pro3-4.rs:28:9
   |
&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; |     let mut card_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Card &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
   |         ------------ move occurs because &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;card_val&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; has type &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;Card&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;, which does not implement the &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;Copy&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; trait
...
&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; |         card_val.symbol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chs.nth&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.unwrap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value partially assigned here after move
...
&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; |         card.push&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; card_val &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
   |                    -------- value moved here, in previous iteration of loop

error: aborting due to previous error

For more information about this error, try &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;rustc --explain E0382&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ソースコードは次のように書いていました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Rust&#34; data-lang=&#34;Rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::io;

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Card&lt;/span&gt; {
    number: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;,
    symbol: &lt;span style=&#34;color:#a6e22e&#34;&gt;char&lt;/span&gt;,
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {

    ...

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;..ary_size {
	&lt;span style=&#34;color:#75715e&#34;&gt;//　カードのシンボルを代入
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; chs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; valv[i &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;].chars().clone();
        card_val.symbol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chs.nth(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;).unwrap();

	&lt;span style=&#34;color:#75715e&#34;&gt;// カードの数値を代入
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        valv[i &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;].remove( &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; );
        card_val.number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; valv[i &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;].parse().expect( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value is not integer&amp;#34;&lt;/span&gt; );
        card.push( card_val );
    }

    ...
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;エラーの内容から推察するに, Card型がCopyトレイトを実装していないため,
28行目の代入でchsの値から資源がcard_val.symbolに移動しており,
再度chsの値への資源割当ができないために起こっていたっぽい。&lt;/p&gt;
&lt;p&gt;構造体の宣言前に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Rust&#34; data-lang=&#34;Rust&#34;&gt;[&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;derive(Copy,Clone)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;を記載することで明示的にユーザ定義型にCopyトレイトを実装できるので,
こちらを記載することで上記エラーに対処できました。&lt;/p&gt;
&lt;p&gt;※ 28行目の~のあたりの推察は間違っている気がするので, 正しい情報がわかれば
修正したい。&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>コンピュータシステムの理論と実装 10章</title>
       <link>https://taisa-asiato.github.io/post/compsystem10/</link>
       <pubDate>Sat, 11 Jan 2020 23:07:22 +0900</pubDate>
       
       <guid>https://taisa-asiato.github.io/post/compsystem10/</guid>
       <description>&lt;h2 id=&#34;heading&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;コンピュータシステムの理論と実装の10章の課題を終えたので記事を書きます。&lt;/p&gt;
&lt;p&gt;10章の目的(11章もですが)はJackコンパイラの作成です。
コンパイラは,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;コンピュータ・プログラミング言語の処理系（言語処理系）の一種で、
高水準言語によるソースコードから、機械語あるいは元のプログラムよりも
低い水準のコードに変換（コンパイル）する
&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9&#34;&gt;https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;プログラムです。
コンパイラはコンパイルする際&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;構文解析&lt;/li&gt;
&lt;li&gt;コード生成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の大きく2つの作業を行なっています。
本書ではJackコンパイラが行う上記２つの作業の詳細を10章, 11章の2章に分けて学び,
課題としてそれぞれ構文解析器, コード生成器を実装します。それぞれ作成したものを合体させ
Jackコンパイラの実装が完了します。&lt;/p&gt;
&lt;p&gt;10章で作成する構文解析器は, 10章の終了時点では解析器単体で動作し
.xmlファイルへ構文解析の結果を出力できるよう実装を行います。&lt;/p&gt;
&lt;h2 id=&#34;heading1&#34;&gt;詳細&lt;/h2&gt;
&lt;p&gt;構文解析機は下記２つの異なるモジュールから構成されます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;トークナイザ&lt;/li&gt;
&lt;li&gt;パーサ&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;heading2&#34;&gt;トークナイザ&lt;/h3&gt;
&lt;p&gt;トークナイザは&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;広義の構文解析の前半の処理で、自然言語の文やプログラミング言語の
ソースコードなどの文字列を解析して、後半の狭義の構文解析で
最小単位（終端記号）となっている「トークン」（字句）の並びを得る手続き
&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E5%AD%97%E5%8F%A5%E8%A7%A3%E6%9E%90&#34;&gt;https://ja.wikipedia.org/wiki/%E5%AD%97%E5%8F%A5%E8%A7%A3%E6%9E%90&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;を行います。
例えばC言語で記載された次の様なソースコードがあるとします。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	printf( &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hello, world&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; );
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これをトークナイズすると, 次の様なトークン列となります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#
include
&amp;lt;
stdio.h
&amp;gt;
int 
main
(
)
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Jack言語のトークンは本書に記載されているため, それを元に字句分割を行いトークンを生成する
プログラムを実装します。&lt;/p&gt;
&lt;p&gt;トークナイザは,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1文字ずつ入力ストリームから値を取得&lt;/li&gt;
&lt;li&gt;異なる性質の文字を取得した場合にトークンの区切れとする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の2つの処理を実装することで正しくトークン列を生成することができるようになります。&lt;/p&gt;
&lt;h3 id=&#34;heading3&#34;&gt;パーサ&lt;/h3&gt;
&lt;p&gt;パーサは構文解析を行うプログラムの総称です。
プログラミング言語などが持つ構文の文法と, トークナイザが生成したトークン列との比較を行います。
例えば, C言語ではif文の構文は次の様になっています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if ( 条件式 ) {
	then節 
} else {
	else節
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;C言語で記述されたソースコードをトークナイズした時, トークン列の中にifのトークンが
あれば, 上記の構文が期待されます。そのため, ifの次のトークンは(, その次のトークンは&amp;hellip;となります。
得られたトークン列を上記構文と比較し, パース処理を進めます。&lt;/p&gt;
&lt;p&gt;トークナイザと同様, こちらもJack言語の構文が記載されているので, そちらを参考にパーサを実装
します。また, 本章の課題である.xmlファイルを生成する機能も実装します。&lt;/p&gt;
&lt;h3 id=&#34;heading4&#34;&gt;その他&lt;/h3&gt;
&lt;p&gt;10章で作成する構文解析器はファイルかディレクトリを入力として与えることになるので,
それらの値を判定しファイル読込及び書込を行う処理を実装する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;heading5&#34;&gt;感想&lt;/h2&gt;
&lt;p&gt;実装中にはまったのが, トークナイザの作成です。
実装開始からしばらくは空白区切りでトークン生成を行なっていました。
考えれば当たり前ですが, ソースコード中のトークンがすべて空白で区切られている
訳ではないため, この方法ではうまくいきませんでした。
トークン列を得る際には入力ストリームから1文字づつ値を得て, その都度トークンの区切れかどうか
判定する処理に書き換えるのがとても億劫で, 書き換えるのにかなりの時間をかけた気がします。&lt;/p&gt;
&lt;p&gt;残り2章です。10章に長くかけすぎたので, 残りの章は早めに終わらせらるよう頑張ります。&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Rust memo1</title>
       <link>https://taisa-asiato.github.io/post/rust_memo1/</link>
       <pubDate>Sat, 14 Dec 2019 23:39:06 +0900</pubDate>
       
       <guid>https://taisa-asiato.github.io/post/rust_memo1/</guid>
       <description>&lt;p&gt;Rustメモ用です。&lt;/p&gt;
&lt;p&gt;螺旋本の挿入ソートプログラムを書きました。
ソースコードは以下です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Rust&#34; data-lang=&#34;Rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::io;

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; tmp_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::new();
    io::stdin().read_line( &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; tmp_str ).expect( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No input val&amp;#34;&lt;/span&gt; );
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ar_size: &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_str.trim().parse().expect( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed parse&amp;#34;&lt;/span&gt; );

    tmp_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::new();
    io::stdin().read_line( &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; tmp_str ).expect( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;readline error val&amp;#34;&lt;/span&gt; );
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; numv: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_str.split_whitespace().filter_map( &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;k&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; k.parse().ok() ).collect::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; iter_v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numv.iter();

    trace( &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;numv );
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;..ar_size {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; tmp_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numv[i &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; tmp_val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; numv[j &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;] ) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; tmp_stat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
            numv[tmp_stat &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numv[j &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;];
            j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        }
        numv[(j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_val;
        trace( &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;numv );
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;( numv: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; round: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numv.len();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;..round {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; round &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
            println&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}&amp;#34;&lt;/span&gt;, numv[i &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;] );
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
            print&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{} &amp;#34;&lt;/span&gt;, numv[i &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;] );
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;実行すると下記のエラーが出力されました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
thread &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;main&amp;#39;&lt;/span&gt; panicked at &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;attempt to subtract with overflow&amp;#39;&lt;/span&gt;, src/main.rs:23:17
note: Run with &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;RUST_BACKTRACE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; environment variable to display a backtrace.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;原因はVecのサイズなどではなく, 変数jの型がusizeのため, whileループ中で
jの値が-1になるためエラーが出ていたっぽい。
jの宣言をi32, 値を代入する際にキャストして以下のコードに書き換えました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Rust&#34; data-lang=&#34;Rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::io;

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; tmp_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::new();
    io::stdin().read_line( &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; tmp_str ).expect( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No input val&amp;#34;&lt;/span&gt; );
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ar_size: &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_str.trim().parse().expect( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed parse&amp;#34;&lt;/span&gt; );

    tmp_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::new();
    io::stdin().read_line( &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; tmp_str ).expect( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;readline error val&amp;#34;&lt;/span&gt; );
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; numv: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_str.split_whitespace().filter_map( &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;k&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; k.parse().ok() ).collect::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; iter_v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numv.iter();

    trace( &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;numv );
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;..ar_size {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; tmp_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numv[i &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; j: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; tmp_val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; numv[j &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;] ) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; tmp_stat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
            numv[tmp_stat &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numv[j &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;];
            j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        }
        numv[(j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_val;
        trace( &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;numv );
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;( numv: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; round: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numv.len();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;..round {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; round &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
            println&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}&amp;#34;&lt;/span&gt;, numv[i &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;] );
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
            print&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{} &amp;#34;&lt;/span&gt;, numv[i &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;] );
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;推測が上であっているのかわからないため, 下記のコードで確かめたところ
同じエラーがでました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Rust&#34; data-lang=&#34;Rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; i: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;..&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; {
        j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;m;
        println&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[{}] \t {}&amp;#34;&lt;/span&gt;, m, j );
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;多分自分の推測のとおりかなと思います。&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>螺旋2</title>
       <link>https://taisa-asiato.github.io/post/pra/</link>
       <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
       
       <guid>https://taisa-asiato.github.io/post/pra/</guid>
       <description>&lt;p&gt;Rustの勉強がてらプロコンの問題を解くことにしました。
AOJのプロコン導入問題を解いていきます。
問題は螺旋本に登場する問題を順番に解いていきます。
はじめの問題はALDS1_1_Dです。&lt;/p&gt;
&lt;p&gt;なお，タイトルの螺旋2は螺旋+章番号を意味します。
今後のナンバリングは上記螺旋+章番号で統一します。&lt;/p&gt;
&lt;p&gt;以下ソースコードです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Rust&#34; data-lang=&#34;Rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::io;

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; tmp_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::new();
    &lt;span style=&#34;color:#75715e&#34;&gt;// 標準入力から一行受け取る
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    io::stdin().read_line( &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; tmp_str );

    &lt;span style=&#34;color:#75715e&#34;&gt;// 標準入力から受け取った文字を数字に変換する
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; linenum: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_str.trim().parse().expect( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;expected val is inreger&amp;#34;&lt;/span&gt; );

    &lt;span style=&#34;color:#75715e&#34;&gt;// 動的配列を宣言
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; numv: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vec::new();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;..linenum {
        &lt;span style=&#34;color:#75715e&#34;&gt;// enter区切りで標準入力から数値を受け取り, 動的配列の末尾へpushする
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        tmp_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::new();
        io::stdin().read_line( &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; tmp_str );
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; tmp_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_str.trim().parse().expect( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed read line from standard input&amp;#34;&lt;/span&gt; );
        numv.push( tmp_val );
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; max_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000000000&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;..linenum {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;..i {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; numv[i &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; numv[j &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; ] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; max_val {
                max_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numv[ i &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; ] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; numv[ j &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; ];
            }
        } 
    }
    println&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}&amp;#34;&lt;/span&gt;, max_val );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当初は上記コードを実装しましたが, TLEで通りませんでした。
（過去にCで出したときはどうだったのだろう。）&lt;/p&gt;
&lt;p&gt;本問題は, ある時点での入力値とそれ以前の入力との差が最大になるものを
求める問題であるため, ある時点における最小の入力値を記録しておけば計算量を
減らすことができます。&lt;/p&gt;
&lt;p&gt;下記に改良したソースコードを記載します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Rust&#34; data-lang=&#34;Rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::io;

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; tmp_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::new();
    &lt;span style=&#34;color:#75715e&#34;&gt;// 標準入力から一行受け取る
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    io::stdin().read_line( &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; tmp_str );

    &lt;span style=&#34;color:#75715e&#34;&gt;// 標準入力から受け取った文字を数字に変換する
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; linenum: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_str.trim().parse().expect( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;expected val is inreger&amp;#34;&lt;/span&gt; );

    &lt;span style=&#34;color:#75715e&#34;&gt;// 動的配列を宣言
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; numv: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vec::new();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;..linenum {
        &lt;span style=&#34;color:#75715e&#34;&gt;// enter区切りで標準入力から数値を受け取り, 動的配列の末尾へpushする
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        tmp_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::new();
        io::stdin().read_line( &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; tmp_str );
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; tmp_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_str.trim().parse().expect( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed read line from standard input&amp;#34;&lt;/span&gt; );
        numv.push( tmp_val );
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; max_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000000000&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; min_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;..linenum {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; max_val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; numv[i &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; min_val {
            max_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numv[i &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; min_val;
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; min_val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; numv[i &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;] {
            min_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numv[i &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;];
        }
    }
    println&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}&amp;#34;&lt;/span&gt;, max_val );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上記でACとなりました。&lt;/p&gt;
&lt;p&gt;末尾に, 本投稿が技術に関する初めての投稿のため, 説明が下手ですが
今後改善していけたらと思います。&lt;/p&gt;
</description>
     </item>
   
 </channel>
</rss>
