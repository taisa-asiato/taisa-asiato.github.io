<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>でぶろぐ</title>
    <link>https://taisa-asiato.github.io/post/</link>
    <description>Recent content on でぶろぐ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 27 Oct 2021 23:34:41 +0900</lastBuildDate>
    
	<atom:link href="https://taisa-asiato.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Abc224d</title>
      <link>https://taisa-asiato.github.io/post/abc224d/</link>
      <pubDate>Wed, 27 Oct 2021 23:34:41 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc224d/</guid>
      <description>解説どおり。コードも解説のものと同じ。
各頂点の隣接頂点の配列を入力を元に作成する。 また, 初期状態と目標状態を配列で保持する。 このとき, コマが置かれていない頂点は目印(例えば-1など)の値を設定する。
初期状態から, コマが置かれていない頂点を探し, その頂点へ隣接する各頂点からコマを移動したときの頂点とコマの状態を HashMapに記録する。このとき, 初期状態から何回コマを動かしたかを値として記録する。 この操作を繰り返し行うことで全探索を行い, 目標とする配列の状態へと遷移できるかを調べる。
終了条件を設定するため, 頂点とコマの状態の配列をHashMap及びVecDequeで管理する。 HashMapに記録されていない状態の配列の場合はHashMapに記録し, VecDequeに配列を追加する。 探索を行う際, VecDequeから配列を取り出し, 上記の探索を行う。 探索が終了した状態の配列はVecDequeから取り除く。 VecDequeが空になった場合が終了状態となる。 最終的に目標状態の配列がHashMapに登録されていれば, その値を出力すれば良い。
以下提出コードです。 ほぼほぼCのコード。Rustっぽく書くにはどうすれば良いのだろうか。
use std::collections::HashMap; use std::collections::VecDeque; fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().</description>
    </item>
    
    <item>
      <title>Abc118c</title>
      <link>https://taisa-asiato.github.io/post/abc118c/</link>
      <pubDate>Thu, 21 Oct 2021 23:57:33 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc118c/</guid>
      <description>自力で解いたが, 解説の解き方の方が良い気がする（わかりやすい）。
入力配列をソート後, 最小値を用い各要素の余りを求め, あまり0の場合は配列から削除する。 以降同じ操作を配列の個数が1になるまで続け, 最後に残った数値が答えとなる。
以下提出コードです。
fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().read_line(&amp;amp;mut s).ok(); s.trim().parse().ok().unwrap() } fn read_vec&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; Vec&amp;lt;T&amp;gt; { read::&amp;lt;String&amp;gt;().split_whitespace() .</description>
    </item>
    
    <item>
      <title>Abc117c</title>
      <link>https://taisa-asiato.github.io/post/abc117c/</link>
      <pubDate>Tue, 19 Oct 2021 23:34:23 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc117c/</guid>
      <description>実装悩んだが自力で解けた。 公式解説も同じ方法っぽい。
入力配列をソート後, Xi+1とXiの差を求める。 最大移動距離はXM-X1となる。 コマを置く位置は, 先に求めたXi+1とXiの差が大きい位置で区間を区切れば コマの移動距離の和を最小にすることができる。
イメージを貼りたかったけど貼り方わからない上作ったイメージもわかりにくかったので貼らなかった。
以下提出コードです。
fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().read_line(&amp;amp;mut s).ok(); s.trim().parse().ok().unwrap() } fn read_vec&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; Vec&amp;lt;T&amp;gt; { read::&amp;lt;String&amp;gt;().</description>
    </item>
    
    <item>
      <title>Abc116c</title>
      <link>https://taisa-asiato.github.io/post/abc116c/</link>
      <pubDate>Tue, 19 Oct 2021 00:44:00 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc116c/</guid>
      <description>自力で解けた。 一度の操作で水やりできる最大区間を求め水やりを行う操作を繰り返せば良い。
以下提出コードです。
fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().read_line(&amp;amp;mut s).ok(); s.trim().parse().ok().unwrap() } fn read_vec&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; Vec&amp;lt;T&amp;gt; { read::&amp;lt;String&amp;gt;().split_whitespace() .map(|e| e.parse().ok().unwrap()).collect() } fn main() { let n: usize = read::&amp;lt;usize&amp;gt;(); let mut v: Vec&amp;lt;i32&amp;gt; = read_vec::&amp;lt;i32&amp;gt;(); let mut cnt: u32 = 0; loop { let lr: (i32, i32) = lr(&amp;amp;v); if lr.</description>
    </item>
    
    <item>
      <title>Abc114c</title>
      <link>https://taisa-asiato.github.io/post/abc114c/</link>
      <pubDate>Fri, 15 Oct 2021 23:26:50 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc114c/</guid>
      <description>久しぶりに自力で解けた。 1から1000000000までの全ての数で, 3, 5, 7の数字のみのものを数え上げると時間が足りないのは明らか。 1000000000未満の数で3, 5, 7すべてを含んだ数を生成して配列に昇順に代入していく。 入力の値と配列に代入した値と比較を行い, 小さい場合にカウントを増やしていけばよい。
以下提出コードです。
fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().read_line(&amp;amp;mut s).ok(); s.trim().parse().ok().unwrap() } fn main() { let n: u64 = read::&amp;lt;u64&amp;gt;(); let mut n3: u64 = 0; let mut n5: u64 = 0; let mut n7: u64 = 0; let mut v: Vec&amp;lt;u64&amp;gt; = Vec::new(); let mut ans: u64 = 0; makenum(0, &amp;amp;mut v); v.</description>
    </item>
    
    <item>
      <title>Abc111c</title>
      <link>https://taisa-asiato.github.io/post/abc111c/</link>
      <pubDate>Sat, 02 Oct 2021 19:54:46 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc111c/</guid>
      <description>解法は解説のとおり。
偶数番号の文字列と奇数番号の文字列をそれぞれ作成する。 それぞれの文字列で最頻出の文字, 2番目に頻出する文字をそれぞれ記録する。 最頻出の文字列が異なる場合はそれぞれの最頻出の文字にすればよい。 違う場合はそれぞれ最頻出と２番目の頻出の文字に置き換える際の, 文書き換え個数が少ない方が答えとなる。
以下提出コードです。
use std::collections::BTreeMap; fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().read_line(&amp;amp;mut s).ok(); s.trim().parse().ok().unwrap() } fn read_vec&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; Vec&amp;lt;T&amp;gt; { read::&amp;lt;String&amp;gt;().</description>
    </item>
    
    <item>
      <title>Abc110c</title>
      <link>https://taisa-asiato.github.io/post/abc110c/</link>
      <pubDate>Sat, 02 Oct 2021 19:48:32 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc110c/</guid>
      <description>解法は解説通り。
文字変換テーブルを作成し, 変換する文字と変換後の文字が全単射の関係になれば よい。
提出コードは下記です。
use std::collections::HashMap; fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().read_line(&amp;amp;mut s).ok(); s.trim().parse().ok().unwrap() } fn read_vec&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; Vec&amp;lt;T&amp;gt; { read::&amp;lt;String&amp;gt;().split_whitespace() .map(|e| e.</description>
    </item>
    
    <item>
      <title>Abc109c</title>
      <link>https://taisa-asiato.github.io/post/abc109c/</link>
      <pubDate>Thu, 30 Sep 2021 23:26:05 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc109c/</guid>
      <description>久々に自力で解けた。
スタート地点Xと訪問する都市の関係は, その差の絶対値がDの倍数になる。 よって各都市とスタート地点Xとの差の最大公約数が求めるDとなる。 gcdの実装忘れてたので復習にもなった。
以下提出コードです。
fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().read_line(&amp;amp;mut s).ok(); s.trim().parse().ok().unwrap() } fn read_vec&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; Vec&amp;lt;T&amp;gt; { read::&amp;lt;String&amp;gt;().split_whitespace() .map(|e| e.parse().ok().unwrap()).collect() } fn main() { let nx: Vec&amp;lt;u64&amp;gt; = read_vec::&amp;lt;u64&amp;gt;(); let mut x: Vec&amp;lt;u64&amp;gt; = read_vec::&amp;lt;u64&amp;gt;(); let mut ans: u64 = 0; for i in 0.</description>
    </item>
    
    <item>
      <title>Abc108c</title>
      <link>https://taisa-asiato.github.io/post/abc108c/</link>
      <pubDate>Wed, 29 Sep 2021 23:32:43 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc108c/</guid>
      <description>解法は解説とおり。
(a, b, c)について(a+b)%K=0, (a+c)%K=0, (b+c)%K=0となる。 これを満たすa, b, cは
 a%K=b%K=c%K=0 a%K=b%K=c%K=K/2 のいずれか。  aについてi=1からNまでのうち, 上記個数をカウントし, それぞれ3乗した値の和が答えとなる。 (b, cも同様なのでaのみ考えれば良い。)
以下提出コードです。
fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().</description>
    </item>
    
    <item>
      <title>Abc220d</title>
      <link>https://taisa-asiato.github.io/post/abc220d/</link>
      <pubDate>Mon, 27 Sep 2021 23:36:50 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc220d/</guid>
      <description>解法は解説どおり。
Aiまで操作を行った際, 左端の値がjである回数をdp[i][j]にメモする。 ANまで操作を行っていき, 最終的にdp[N][0]からdp[N][9]の値が答えとなる。
※ 配列の宣言, 回数の数え上げでミスをしていた。
// これは要素数1_000_00の配列を10個宣言なので間違い let mut ary: [[u32; 1_000_00]; 10]; // 正しくは以下 let mut ary: [[u32; 10]; 1_000_00]; // これはdp[i][j]%mod+dp[i][j]の値をdp[m][n]に代入する操作 dp[m][n] += dp[i][j]%mod; // 正しい操作は, (dp[m][n]+dp[i][j])%modをdp[m][n]に代入する操作 自分はこんな変なことをしていたのかとかなりショックを受けた。</description>
    </item>
    
    <item>
      <title>Abc099c</title>
      <link>https://taisa-asiato.github.io/post/abc099c/</link>
      <pubDate>Sat, 25 Sep 2021 13:27:05 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc099c/</guid>
      <description>解法は解説動画のとおり。
n円までの最小引出回数dp[n]の候補は
 n-1円の時に1円を1回引出す場合(計dp[n-1]+1回) n-6円の時に6円を1回引出す場合(計dp[n-6]+1回) &amp;hellip; n-9i円の時に9i円を1回引出す場合(計dp[n-9i]+1回)  があり, これらの中から最小だった引出し回数がdp[n]となる。 初期値dp[0]は0で初期化しておき, 以降ループないし再帰関数でdpのテーブルを埋めていけばよい。
DP問題はあまり解いていないので, 早く慣れたいところ。 DP問題の中では多分簡単な方だと思う(dpテーブルが多次元のものもあるので, 1次元の問題は簡単な方では?と思う。)。 類似の問題を集めたWeb記事を見つけているのでちまちまやっていく。
以下提出コードです。
fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().read_line(&amp;amp;mut s).</description>
    </item>
    
    <item>
      <title>Abc097c</title>
      <link>https://taisa-asiato.github.io/post/abc097c/</link>
      <pubDate>Thu, 23 Sep 2021 15:14:58 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc097c/</guid>
      <description>制約(Kは1以上5以下となる。)から, 生成できる部分文字列のうち, 上位5番目までの 文字列の長さはK以下となる。 １文字目から順に文字列長K以下となる部分文字列を生成・記録し, K番目の文字列を出力すれば良い。
以下提出コードです。
use std::collections::HashSet; fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().read_line(&amp;amp;mut s).ok(); s.trim().parse().ok().unwrap() } fn main() { let v: String = read::&amp;lt;String&amp;gt;(); let k: usize = read::&amp;lt;usize&amp;gt;(); let mut hs: HashSet&amp;lt;String&amp;gt; = HashSet::new(); for i in 0.</description>
    </item>
    
    <item>
      <title>Abc096c</title>
      <link>https://taisa-asiato.github.io/post/abc096c/</link>
      <pubDate>Tue, 21 Sep 2021 23:50:55 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc096c/</guid>
      <description>またしても問題文を誤読していた。
(i, j)を黒く塗る場合は, (i+1, j), (i-1, j), (i, j+1), (i, j-1)のいずれかを 黒く塗る必要がある。
全ての(i, j)に対して上記を満たすことができるかを確認すれば良い。
以下提出コードです。
fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().read_line(&amp;amp;mut s).ok(); s.trim().parse().ok().unwrap() } fn read_vec&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; Vec&amp;lt;T&amp;gt; { read::&amp;lt;String&amp;gt;().</description>
    </item>
    
    <item>
      <title>Abc047d</title>
      <link>https://taisa-asiato.github.io/post/abc047d/</link>
      <pubDate>Sun, 19 Sep 2021 14:49:35 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc047d/</guid>
      <description>解法は解説通り。
利益最大となる町の組み合わせ（買う店と売る店の組み合わせ）が複数存在する可能性もあるため一度最大の利益を求める。 その後, 町1から町i-1と町iで求められる利益と先に求めた最大の利益が同じ場合の数を カウントしていく。
以下提出コードです。
fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().read_line(&amp;amp;mut s).ok(); s.trim().parse().ok().unwrap() } fn read_vec&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; Vec&amp;lt;T&amp;gt; { read::&amp;lt;String&amp;gt;().split_whitespace() .map(|e| e.parse().ok().unwrap()).collect() } fn main() { let nt: Vec&amp;lt;u64&amp;gt; = read_vec::&amp;lt;u64&amp;gt;(); let a: Vec&amp;lt;u64&amp;gt; = read_vec::&amp;lt;u64&amp;gt;(); let mut min: u64 = 1_000_000_000; let mut max: u64 = 0; let mut cnt: u32 = 0; for i in 0.</description>
    </item>
    
    <item>
      <title>Abc088c</title>
      <link>https://taisa-asiato.github.io/post/abc088c/</link>
      <pubDate>Sat, 18 Sep 2021 17:52:48 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc088c/</guid>
      <description>はじめはa1からb3までの和がc11からc33までの和の1/3に等しいので すべての入力を和算したのち3で割り切れるかどうかで判定したがWAとなった。
解説のとおり, a1を0と仮定しても差し支えないため, そのような実装にしました。
以下提出コードです。
fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().read_line(&amp;amp;mut s).ok(); s.trim().parse().ok().unwrap() } fn read_vec&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; Vec&amp;lt;T&amp;gt; { read::&amp;lt;String&amp;gt;().split_whitespace() .map(|e| e.parse().ok().unwrap()).collect() } fn main() { let mut v: Vec&amp;lt;Vec&amp;lt;i32&amp;gt;&amp;gt; = Vec::new(); let mut a: [i32; 3] = [0; 3]; let mut b: [i32; 3] = [0; 3]; for i in 0.</description>
    </item>
    
    <item>
      <title>Abc123B</title>
      <link>https://taisa-asiato.github.io/post/abc123b/</link>
      <pubDate>Wed, 15 Sep 2021 15:11:41 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc123b/</guid>
      <description>全ての組み合わせを試すか, 1の位が一番小さな料理を最後にオーダーするかの 方法がある。後者で解いた。 以下提出コードです。
fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().read_line(&amp;amp;mut s).ok(); s.trim().parse().ok().unwrap() } fn main() { let mut v: Vec&amp;lt;u32&amp;gt; = Vec::new(); let mut a: Vec&amp;lt;u32&amp;gt; = Vec::new(); let mut r: Vec&amp;lt;u32&amp;gt; = Vec::new(); let mut ans: u32 = 0; for i in 0.</description>
    </item>
    
    <item>
      <title>Abc084C</title>
      <link>https://taisa-asiato.github.io/post/abc084c/</link>
      <pubDate>Wed, 15 Sep 2021 00:26:55 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc084c/</guid>
      <description>問題記載のとおり, ダイアグラムを考え実装するだけ。 自力で実装したが, 解説を見たらそちらの方がわかりやすかった。
以下提出コードです。
fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().read_line(&amp;amp;mut s).ok(); s.trim().parse().ok().unwrap() } fn read_vec&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; Vec&amp;lt;T&amp;gt; { read::&amp;lt;String&amp;gt;().split_whitespace() .map(|e| e.parse().ok().unwrap()).collect() } fn main() { let n: usize = read::&amp;lt;usize&amp;gt;(); let mut v: Vec&amp;lt;Vec&amp;lt;u64&amp;gt;&amp;gt; = Vec::new(); let mut t: Vec&amp;lt;u64&amp;gt; = Vec::new(); for i in 0.</description>
    </item>
    
    <item>
      <title>Abc075C</title>
      <link>https://taisa-asiato.github.io/post/abc075c/</link>
      <pubDate>Sun, 12 Sep 2021 14:59:56 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc075c/</guid>
      <description>何となくやり方は思いついたが, コードに落とし込むことができなかった。 解説と同じとおり, 下記のようなアルゴリズムを実装しました。
 辺から一つ選択し, その辺が無いものとする dfsによって各頂点を訪れることができるか探索する  未訪問の頂点で, 辺が接続されている場合は接続先の頂点に対して更に探索を続ける 訪問した頂点はメモしておく   探索が終了したら訪問済みの頂点を確認する 全ての頂点を訪問できた場合, その辺は橋ではない  以下が提出コードです。
fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().</description>
    </item>
    
    <item>
      <title>Abc080</title>
      <link>https://taisa-asiato.github.io/post/abc080/</link>
      <pubDate>Fri, 10 Sep 2021 22:16:19 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/abc080/</guid>
      <description>問題文を勘違いして, 10営業区間それぞれで利益最大となる店の利益の和を求めていた。
求める回答は, joisinoお姉ちゃんが営業を行った区間のうち, 個別の店iに対して, 被った営業区間毎に利益がPij(店jの営業区間がjoisinoお姉ちゃんの営業区間とj個被る) となるので, 利益最大となるpi,jを各店毎に求めた和となる。
解法は解説通りで, joisinoお姉ちゃんの10営業区間の（営業する/しない）すべての組み合わせに対して 各店iで利益最大となるPijを求めていき, 最終的にその和を出力する。
全ての組み合わせを試すのにbit演算を用いている。 ※ 高々(2^10-1)×100なので, 全通り試しても十分間に合う。
以下提出コードです。
fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().read_line(&amp;amp;mut s).ok(); s.</description>
    </item>
    
    <item>
      <title>Rust memo3</title>
      <link>https://taisa-asiato.github.io/post/rust_memo3/</link>
      <pubDate>Mon, 04 Jan 2021 23:53:49 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/rust_memo3/</guid>
      <description>Rustの勉強メモその3です。
2018年にアカウントを登録しその後１問も解いていなかったAtcoderですが 2020年の年末から過去問題を解き始めたので, 解いた問題のメモです。
解いた問題はABC042 C - こだわり者いろはちゃん です。 解法は思いつかなかったので公式の解説通りなのですが,
 数値(nとする)を1から1づつインクリメントする。 nが指定された値(問題文ではN)以上か確認 2.の判定が真ならnの各桁にいろはちゃんの嫌いな数字が混じっていないか確認 3.で嫌いな数字が混じっていなければnを出力して終了, そうでないなら1. に戻る  上記であれば&amp;quot;間に合う&amp;quot;との事だったので, その通りに実装したが3度TLEをもらいました。 subtask1_X_02.txtが入力の時のみTLEになっていた。 この時のコードは次の通りです。
fn read&amp;lt;T: std::str::FromStr&amp;gt;() -&amp;gt; T { let mut s = String::new(); std::io::stdin().</description>
    </item>
    
    <item>
      <title>Rust Memo2</title>
      <link>https://taisa-asiato.github.io/post/rust-memo2/</link>
      <pubDate>Sun, 12 Jan 2020 21:48:17 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/rust-memo2/</guid>
      <description>Rustの勉強メモその2です。
螺旋本の3.5問目(安定ソート), トランプカードを 構造体を使用して表現していたのですが, 標準入力から得た値をパースしてCard型のVectorにpushする処理が コンパイル時にエラーになりました。
error[E0382]: assign to part of moved value: `card_val` --&amp;gt; pro3-4.rs:28:9 | 20 | let mut card_val = Card { | ------------ move occurs because `card_val` has type `Card`, which does not implement the `Copy` trait .</description>
    </item>
    
    <item>
      <title>コンピュータシステムの理論と実装 10章</title>
      <link>https://taisa-asiato.github.io/post/compsystem10/</link>
      <pubDate>Sat, 11 Jan 2020 23:07:22 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/compsystem10/</guid>
      <description>概要 コンピュータシステムの理論と実装の10章の課題を終えたので記事を書きます。
10章の目的(11章もですが)はJackコンパイラの作成です。 コンパイラは,
 コンピュータ・プログラミング言語の処理系（言語処理系）の一種で、 高水準言語によるソースコードから、機械語あるいは元のプログラムよりも 低い水準のコードに変換（コンパイル）する https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9
 プログラムです。 コンパイラはコンパイルする際
 構文解析 コード生成  の大きく2つの作業を行なっています。 本書ではJackコンパイラが行う上記２つの作業の詳細を10章, 11章の2章に分けて学び, 課題としてそれぞれ構文解析器, コード生成器を実装します。それぞれ作成したものを合体させ Jackコンパイラの実装が完了します。
10章で作成する構文解析器は, 10章の終了時点では解析器単体で動作し .xmlファイルへ構文解析の結果を出力できるよう実装を行います。
詳細 構文解析機は下記２つの異なるモジュールから構成されます。
 トークナイザ パーサ  トークナイザ トークナイザは</description>
    </item>
    
    <item>
      <title>Rust memo1</title>
      <link>https://taisa-asiato.github.io/post/rust_memo1/</link>
      <pubDate>Sat, 14 Dec 2019 23:39:06 +0900</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/rust_memo1/</guid>
      <description>Rustメモ用です。
螺旋本の挿入ソートプログラムを書きました。 ソースコードは以下です。
use std::io; fn main() { let mut tmp_str = String::new(); io::stdin().read_line( &amp;amp;mut tmp_str ).expect( &amp;#34;No input val&amp;#34; ); let ar_size: u32 = tmp_str.trim().parse().expect( &amp;#34;Failed parse&amp;#34; ); tmp_str = String::new(); io::stdin().</description>
    </item>
    
    <item>
      <title>螺旋2</title>
      <link>https://taisa-asiato.github.io/post/pra/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://taisa-asiato.github.io/post/pra/</guid>
      <description>Rustの勉強がてらプロコンの問題を解くことにしました。 AOJのプロコン導入問題を解いていきます。 問題は螺旋本に登場する問題を順番に解いていきます。 はじめの問題はALDS1_1_Dです。
なお，タイトルの螺旋2は螺旋+章番号を意味します。 今後のナンバリングは上記螺旋+章番号で統一します。
以下ソースコードです。
use std::io; fn main() { let mut tmp_str = String::new(); // 標準入力から一行受け取る  io::stdin().read_line( &amp;amp;mut tmp_str ); // 標準入力から受け取った文字を数字に変換する  let linenum: i32 = tmp_str.</description>
    </item>
    
  </channel>
</rss>